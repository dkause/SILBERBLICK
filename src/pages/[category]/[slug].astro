---
import { getCollection } from "astro:content";
import { Image } from "astro:assets";
import HeaderNavigation from "../../components/HeaderNavigation.astro";

export async function getStaticPaths() {
  const photos = await getCollection("photos");
  return photos.map((photo) => ({
    params: {
      category: photo.data.category,
      slug: photo.data.slug || photo.slug,
    },
    props: {
      photo,
      imageFilename: photo.id.replace(".md", ""), // Remove .md extension for image lookup
    },
  }));
}

const { photo, imageFilename } = Astro.props;
const { Content } = await photo.render();

// Determine current path for navigation
const currentPath = `/${photo.data.category}/`;

// Import the image dynamically from src/assets
const images = import.meta.glob("../../assets/images/**/*.jpg", {
  eager: true,
});
// Use the actual filename for image lookup
const imageKey = `../../assets/images/${photo.data.category}/${imageFilename}.jpg`;
const imageModule = images[imageKey];
---

<html lang="de">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{photo.data.name} | SILBERBLICK</title>
    <meta
      name="description"
      content={photo.data.alt ||
        `${photo.data.name} - ${photo.data.genre} von Daniel Kause, Fotograf in Berlin`}
    />
    <meta property="og:title" content={`${photo.data.name} | SILBERBLICK`} />
    <meta
      property="og:description"
      content={photo.data.alt ||
        `${photo.data.name} - ${photo.data.genre} von Daniel Kause`}
    />
    <meta
      property="og:image"
      content={imageModule?.default?.src || photo.data.image.src}
    />
    <meta property="og:type" content="article" />
    <link rel="stylesheet" href="/styles/layout.css" />
  </head>
  <body>
    <HeaderNavigation currentPath={currentPath} />

    <main class="photo-layout">
      <h1 class="page-title">{photo.data.category.charAt(0).toUpperCase() + photo.data.category.slice(1)}</h1>

      <div class="photo-hero">
        {
          imageModule && (
            <Image
              src={imageModule.default}
              alt={photo.data.image.alt}
              width={1200}
              height={1600}
              format="webp"
              quality={90}
              class="hero-image"
            />
          )
        }
        {
          !imageModule && (
            <p style="color: red; font-weight: bold;">
              ❌ Bild nicht gefunden: {imageKey}
            </p>
          )
        }
      </div>

      <aside class="photo-content">
        <header class="photo-header">
          <h2>{photo.data.name}</h2>
          <p class="meta">{photo.data.genre}</p>
          <p class="category">{photo.data.category}</p>
        </header>

        <div class="description">
          <Content />
        </div>

        <nav class="photo-nav">
          <a href={`/${photo.data.category}/`}>← Zurück zur Galerie</a>
        </nav>
      </aside>
    </main>

    <style>
      /* Two-Column Photo Layout */
      .photo-layout {
        display: grid;
        grid-template-columns: 1fr 1fr 1fr;
        grid-template-areas: 
          "title title title"
          "hero-image description collection";
        min-height: 100vh;
        gap: 2rem;
        padding: 2rem;
        width: 100%;
        box-sizing: border-box;
      }

      .page-title {
        grid-area: title;

        margin: 0 0 2rem 0;
        font-size: 2.5rem;       
        letter-spacing: 0.1em;
        font-weight: 600;
      }

      /* Left Column - Hero Image */
      .photo-hero {
        grid-area: hero-image;
        position: relative;
        display: flex;
        align-items: center;
        justify-content: center;
        padding: 1rem;
      }

      .hero-image {
        width: 100%;
        height: auto;
        max-height: 90vh;
        object-fit: contain;
      }

      /* Middle Column - Content */
      .photo-content {
        grid-area: description;
        padding: 2rem 1rem;
        background: white;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
      }

      .photo-header {
        margin-bottom: 2rem;
      }

      .photo-header h1 {
        font-size: 2rem;
        font-weight: 600;
        margin: 0 0 1rem 0;
        line-height: 1.2;
      }

      .meta {
        color: #666;
        font-size: 0.9rem;
        margin: 0.5rem 0;
        font-weight: 500;
      }

      .category {
        color: #999;
        font-size: 0.8rem;
        text-transform: uppercase;
        letter-spacing: 0.05em;
        margin: 0;
      }

      .description {
        flex-grow: 1;
        font-size: 1rem;
        line-height: 1.6;
        color: #333;
      }

      .description p {
        margin: 0 0 1rem 0;
      }

      .photo-nav {
        margin-top: 2rem;
        padding-top: 2rem;
        border-top: 1px solid #eee;
      }

      .photo-nav a {
        color: #333;
        text-decoration: none;
        font-weight: 500;
        font-size: 0.9rem;
      }

      .photo-nav a:hover {
        opacity: 0.7;
      }

      /* Mobile: Stack Layout */
      @media (max-width: 768px) {
        .photo-layout {
          grid-template-columns: 1fr;
          grid-template-areas: 
            "title"
            "hero-image"
            "description";
          min-height: auto;
          gap: 1rem;
          padding: 1rem;
        }

        .page-title {
          font-size: 1.8rem;
          margin: 0 0 1rem 0;
        }

        .photo-hero {
          min-height: 50vh;
          padding: 0;
        }

        .photo-content {
          padding: 1rem 0;
        }

        .photo-header h2 {
          font-size: 1.5rem;
        }
      }
    </style>
  </body>
</html>
